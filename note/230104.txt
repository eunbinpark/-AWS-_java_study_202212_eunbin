230104

[반복문]
-continue : 다음 반복으로 넘어가라
-while문 안에 다른 조건문을 넣으면 그것먼저 실행함
-내부의 명령문 실행이 완료되면 다시 바깥의 반복문으로 넘어감

[메소드]
-매개변수 : x, 반환 : x
-void는 실행이후 반환되는 값이 없음
-컴파일 과정에서는 메소드가 정의되는것이 먼저이고 이후에 main문이 실행된다
-데이터 반환은 하나만 가능
-여러개의 데이터를 반환하고 싶으면 리스트나 배열을 사용해야 함
-클래스 안에 있는 함수는 메소드라고 부름
-클래스 밖에 있는 함수를 함수라고 부름
-자바에서는 전부 클래스 내부에서 함수를 선언하기 때문에 전부 메소드라고 부름
-메소드는 같은 이름으로 선언하지 못한다
*같은이름으로 선언할수 있는 조건
-매개변수의 종류가 다름
-매개변수의 갯수가 다름
 -> 메소드의 오버로딩

[오버로딩]
-불러오는것
-호출하는 시점에 어떤 매개변수를 부르는지에 따라 호출되는 메소드가 결정된다
-리턴이 다르다고해서 오버로딩이 되지는 않는다. 

[오버라이딩]
-덮어쓰는것
-재정의 해서 사용함


[객체지향]
-객체지향 언어 : 프로그래밍 관점에서는 객체들의 관계성을 사용하여 순차적으로 수행되는 프로그램 내에서 객체들간의 관계를 형성하여 프로그램을 동작하게 함
-변수명은 명사로 짓고 메소드명은 동사로 지음
-객체지향은 절차지향의 반대가 아님 
-객체지향도 절차지향언어에 속하지만 객체라는 것의 관계가 추가된 것


객체 : 데이터 + 기능
(예시)
객체 - 컴퓨터
데이터(변수) - 모니터, 본체, 키보드, 마우스, 스피커 등
기능(메소드) - 화면출력, 프로그램 실행, 입력, 소리출력 등

객체지향 언어특징
1. 상속
-의미 그대로 상위 클래스의 모든 것을 상속받아 사용하는 것
-부모와 자식 관계
-부모객체가 가지고 있던 정보를 확장시키는 개념

예시
사람이라는 객체 밑으로 학생이나 선생이라는 객체로 상속을 시킴

2. 캡슐화
-데이터와 기능을 외부로부터 접근은 차단하고 권한 또는 절차 없이 데이터를 변경 또는 기능 수행을 할 수 없게 캡슐처럼 보호함
-데이터의 은닉성
-접근제한자 private

예시
은행에 방문하는 고객이 본인의 돈이라고 해서 바로 꺼낼 수 없음
은행에 있는 돈은 캡슐에 감싸지듯 보호되어있음

3. 추상화
-추상적인 요소들을 묶어서 분류하는 것
-학생, 선생, 학부모 등 사람이라는 추상적인 요소로 분류할 수 있음
-데이터의 구조화
-공통된것을 추출해내는 것

4. 다형성
-객체의 기능이 다향한 형태를 가질 수 있음
-상속과 깊은 관계를 가진다
-한 부모 밑에서 태어난 자식이 완전히 같을수 없듯이 객체 또한 부모 클래스로 부터 상속받은 데이터와 기능을 자식클래스에서 재정의하여 사용할 수 있음
-자료의 형태를 바꾸는 형변환을 하는 것도 다형성의 예시
-메소드의 이름이 동일하지만 다양하게 정의해서 사용가능한 것도 또 하나의 다형성의 예시
-동일한 이름과 동일한 매개변수를 가지고 있지만 다양하게 사용가능한 오버라이딩도 동일한 예시

객체지향 언어의 장점
(절차지향 언어에 상대적임)
1. 재사용성 : 상속을 통해 코드의 재사용을 높일수 있음
2. 생산성 향상 : 클래스 단위의 부품들을 조립
3. 유지보수의 우수성 : 구조화 된 소스코드 클래스단위로 소스코드를 관리할 수 있음

객체지향 언어의 단점
1. 객체를 세분화하여 설계하여야 한다.
2. 실행 속도가 절차지향 언어 대비 느리다.
3. 상속으로 인하여 관계가 많이 형성되면 코딩의 난이도가 높아진다.


[클래스]
-객체에 대하여 정의해 놓은 설계도 혹은 틀
-메모리공간에 찍어내기위한 도구로 사용
-참조자료형, 데이터를 담을 수 있는 공간이라는 뜻
(붕어빵 틀)

[오브젝트]
-객체라고 부름
-클래스를 통해 구현할 수 있는 모든 대상
-해당 클래스로 구현한 인스턴스를 대표하는 의미
(붕어빵 틀로 찍어낼 수 있는 모든 것)

[인스턴스]
-객체가 실제로 구현된 것
-클래스의 인스턴스라고 표현함
-생성을 하여 메모리공간을 할당받은 것이 인스턴스임
(붕어빵 틀로 찍어내서 실제로 존재하는 것)


자료형 변수명 = 값
J09_Student를 담을 수 있는 자료형
스택메모리에는 컴파일 시점에 할당됨
원래는 J09_Student 에 null값이 들어있음
new는 생성자를 쓰기 위한 키워드 (new 생성자)가 한 세트
new라는 것을 거쳐 생성을 함 : 동적 메모리 할당
스택메모리에는 컴파일 시점에 할당됨
스택메모리 : 정적메모리, 힙 : 동적메모리
컴파일 당시에 스택메모리를 할당해주었는데 추가로 메모리가 필요한 경우 힙메모리에서 빌려옴
힙메모리에서 빌리는 과정을 생성이라고 함
힙메모리에 할당된 주소는 매번 변경됨 
따라서 힙메모리 주소를 정적메모리인 스택메모리에 넣어두고 이름을 지정해줌 
따라서 이름을 알고 있으면 힙메모리의 주소를 불러올 수 있음(아래 Student1 같은 경우)
. : 참조자료형

생성자는 클래스 명과 일치한다
그러나 형태는 메소드형태임
클래스를 정의해두어야 생성자 사용이 가능하다
어딘가에 대입하려면 리턴값이 있어야 함
생성자는 항상 주소값이 들어가야 해서 항상 주소값을 리턴해줌
